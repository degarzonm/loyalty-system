services:
  apigateway:
    image: nginx:latest
    container_name: apigateway
    ports:
      - "80:80"
    volumes:
      - ./reverse_proxy/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - customer_leal_service
      - brand_leal_service
    restart: always
    networks:
      - leal_network

  db_customers:
    image: postgres:15
    container_name: db_customers
    ports:
      - "5432:5432" 
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_CUSTOMERS}
    volumes:
      - db_customers_data:/var/lib/postgresql/data
      - ./db/init_customers.sql:/docker-entrypoint-initdb.d/init_customers.sql
    networks:
      leal_network:
        aliases:
          - db_customers  
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB_CUSTOMERS}"]
      interval: 5s
      timeout: 5s
      retries: 5
  
  db_brands:
    image: postgres:15
    container_name: db_brands
    ports:
      - "5433:5432" 
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_BRANDS}
    volumes:
      - db_brands_data:/var/lib/postgresql/data
      - ./db/init_brands.sql:/docker-entrypoint-initdb.d/init_brands.sql
    networks:
      leal_network:
        aliases:
          - db_brands
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB_BRANDS}"]
      interval: 5s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      leal_network:
        aliases:
          - zookeeper

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    networks:
      leal_network:
        aliases:
          - kafka

  customer_leal_service:
    build:
      context: ./customer_leal_service
    container_name: customer_leal_service
    environment:
      DB_HOST: db_customers
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${POSTGRES_DB_CUSTOMERS}
      MSG_BROKER_ADDRESS: kafka:9092
      MSG_PURCHASE: ${MSG_PURCHASE}
      MSG_APPLY_POINTS: ${MSG_APPLY_POINTS}
      CUSTOMER_GROUP_NAME: ${CUSTOMER_GROUP_NAME}
      HTTP_SERVER_PORT: 8081
    depends_on:
      db_customers:
        condition: service_healthy
      kafka:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/ping"]
      interval: 15s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      leal_network:
        aliases:
          - customer_leal_service

  brand_leal_service:
    build:
      context: ./brand_leal_service
    container_name: brand_leal_service
    environment:
      DB_HOST: db_brands
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${POSTGRES_DB_BRANDS}
      MSG_BROKER_ADDRESS: kafka:9092
      MSG_PURCHASE: ${MSG_PURCHASE}
      MSG_APPLY_POINTS: ${MSG_APPLY_POINTS}
      BRAND_GROUP_NAME: ${BRAND_GROUP_NAME}
      HTTP_SERVER_PORT: 8080
    depends_on:
      db_brands:
        condition: service_healthy
      kafka:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/ping"]
      interval: 15s
      timeout: 3s
      retries: 5
    networks:
      leal_network:
        aliases:
          - brand_leal_service

volumes:
  db_customers_data:
  db_brands_data:

networks:
  leal_network:
